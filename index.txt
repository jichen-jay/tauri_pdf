  Tauri

### Counter:

Increment Decrement Reset

Press Ctrl+R to reload and see the state persist.

 Process File

const { invoke } = window.\_\_TAURI\_\_.core; const { readTextFile, readFile } = window.\_\_TAURI\_\_.fs; const { Command } = window.\_\_TAURI\_\_.shell; const incrementBtn = document.querySelector("#increment-btn"); const decrementBtn = document.querySelector("#decrement-btn"); const resetBtn = document.querySelector("#reset-btn"); const counterContainer = document.querySelector("#counter"); const filePathInput = document.getElementById("filePath"); const processButton = document.getElementById("processFile"); const resultTextarea = document.getElementById("result"); processButton.addEventListener("click", async () => { const filePath = filePathInput.value; try { const txtFilePath = filePath.replace(/\\.\[^/.\]+$/, ".txt"); let result = await Command.create("turndown-cli", \[ filePath, txtFilePath, \]).execute(); if (result.code !== 0) { throw new Error( \`docling exited with code ${result.code}: ${result.stderr}\` ); } await readMD(txtFilePath); // Call readMD after docling finishes successfully } catch (error) { console.error("Failed to process file:", error); resultTextarea.value = "Failed to process file or read output: " + error; } }); async function readMD(filePath) { try { let content = await readTextFile(filePath); resultTextarea.value = content; } catch (error) { console.error("Failed to read .md file:", error); resultTextarea.value = "Failed to read .md file: " + error; } } document.addEventListener("DOMContentLoaded", async () => { let currentCount = await invoke("get"); counterContainer.innerText = currentCount; console.log("loaded"); }); incrementBtn.addEventListener("click", async () => { let newCount = await invoke("increment"); counterContainer.innerText = newCount; }); decrementBtn.addEventListener("click", async () => { let newCount = await invoke("decrement"); counterContainer.innerText = newCount; }); resetBtn.addEventListener("click", async () => { let newCount = await invoke("reset"); counterContainer.innerText = newCount; }); body { font-family: sans-serif; } .container { display: flex; flex-direction: column; gap: 1rem; padding: 1rem; } .input-area { display: flex; gap: 0.5rem; align-items: center; } .output-area textarea { width: 100%; height: 20rem; resize: none; }